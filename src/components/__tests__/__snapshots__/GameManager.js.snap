// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly: without props 1`] = `
<View
  style={
    Object {
      "backgroundColor": "white",
      "flex": 1,
    }
  }
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
  >
     TOUR : 
    0
     
  </Text>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "marginBottom": 10,
        "marginTop": 10,
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
    >
       Score is : 
      0
       - 
      0
    </Text>
    <View />
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "center",
        "marginBottom": 10,
        "marginTop": 10,
      }
    }
  >
    <RCTScrollView
      ItemSeparatorComponent={[Function]}
      data={
        Array [
          Object {
            "images": 1,
            "key": "rock",
            "loose": Array [
              "paper",
            ],
            "reference": "rock",
            "wins": Array [
              "scissors",
            ],
          },
          Object {
            "images": 1,
            "key": "paper",
            "loose": Array [
              "scissors",
            ],
            "reference": "paper",
            "wins": Array [
              "rock",
            ],
          },
          Object {
            "images": 1,
            "key": "scissors",
            "loose": Array [
              "rock",
            ],
            "reference": "scissors",
            "wins": Array [
              "paper",
            ],
          },
        ]
      }
      disableVirtualization={false}
      extraData={Object {}}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View>
            <Image
              source={1}
              style={
                Object {
                  "backgroundColor": "white",
                  "height": 50,
                  "width": 50,
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "margin": 20,
              }
            }
          />
        </View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View>
            <Image
              source={1}
              style={
                Object {
                  "backgroundColor": "white",
                  "height": 50,
                  "width": 50,
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "margin": 20,
              }
            }
          />
        </View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View>
            <Image
              source={1}
              style={
                Object {
                  "backgroundColor": "white",
                  "height": 50,
                  "width": 50,
                }
              }
            />
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        disabled={undefined}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "padding": 8,
              "textAlign": "center",
            },
            Object {
              "color": "pink",
            },
          ]
        }
      >
        back
      </Text>
    </View>
  </View>
</View>
`;

exports[`renders correctly: without props 2`] = `
<View
  style={
    Object {
      "backgroundColor": "white",
      "flex": 1,
    }
  }
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
  >
     TOUR : 
    0
     
  </Text>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "marginBottom": 10,
        "marginTop": 10,
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
    >
       Score is : 
      0
       - 
      0
    </Text>
    <View />
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "center",
        "marginBottom": 10,
        "marginTop": 10,
      }
    }
  >
    <RCTScrollView
      ItemSeparatorComponent={[Function]}
      data={
        Array [
          Object {
            "images": 1,
            "key": "rock",
            "loose": Array [
              "paper",
            ],
            "reference": "rock",
            "wins": Array [
              "scissors",
            ],
          },
          Object {
            "images": 1,
            "key": "paper",
            "loose": Array [
              "scissors",
            ],
            "reference": "paper",
            "wins": Array [
              "rock",
            ],
          },
          Object {
            "images": 1,
            "key": "scissors",
            "loose": Array [
              "rock",
            ],
            "reference": "scissors",
            "wins": Array [
              "paper",
            ],
          },
        ]
      }
      disableVirtualization={false}
      extraData={Object {}}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View>
            <Image
              source={1}
              style={
                Object {
                  "backgroundColor": "white",
                  "height": 50,
                  "width": 50,
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "margin": 20,
              }
            }
          />
        </View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View>
            <Image
              source={1}
              style={
                Object {
                  "backgroundColor": "white",
                  "height": 50,
                  "width": 50,
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "margin": 20,
              }
            }
          />
        </View>
        <View
          onLayout={[Function]}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View>
            <Image
              source={1}
              style={
                Object {
                  "backgroundColor": "white",
                  "height": 50,
                  "width": 50,
                }
              }
            />
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        disabled={undefined}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "padding": 8,
              "textAlign": "center",
            },
            Object {
              "color": "pink",
            },
          ]
        }
      >
        back
      </Text>
    </View>
  </View>
</View>
`;
