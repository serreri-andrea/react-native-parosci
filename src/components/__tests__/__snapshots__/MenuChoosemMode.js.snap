// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly: with 1`] = `
<RCTScrollView
  data={
    Array [
      Object {
        "cards": Array [
          Object {
            "images": 1,
            "key": "rock",
            "loose": Array [
              "paper",
            ],
            "reference": "rock",
            "wins": Array [
              "scissors",
            ],
          },
          Object {
            "images": 1,
            "key": "paper",
            "loose": Array [
              "scissors",
            ],
            "reference": "paper",
            "wins": Array [
              "rock",
            ],
          },
          Object {
            "images": 1,
            "key": "scissors",
            "loose": Array [
              "rock",
            ],
            "reference": "scissors",
            "wins": Array [
              "paper",
            ],
          },
        ],
        "modeAllow": Array [
          "pve",
          "eve",
        ],
        "reference": "classic",
      },
      Object {
        "cards": Array [
          Object {
            "images": 1,
            "key": "rock",
            "loose": Array [
              "paper",
              "spock",
            ],
            "reference": "rock",
            "wins": Array [
              "scissors",
              "lizard",
            ],
          },
          Object {
            "images": 1,
            "key": "paper",
            "loose": Array [
              "scissors",
              "lizard",
            ],
            "reference": "paper",
            "wins": Array [
              "rock",
              "spock",
            ],
          },
          Object {
            "images": 1,
            "key": "scissors",
            "loose": Array [
              "rock",
              "spock",
            ],
            "reference": "scissors",
            "wins": Array [
              "paper",
              "lizard",
            ],
          },
          Object {
            "images": 1,
            "key": "spock",
            "loose": Array [
              "lizard",
              "paper",
            ],
            "reference": "spock",
            "wins": Array [
              "rock",
              "scissors",
            ],
          },
          Object {
            "images": 1,
            "key": "lizard",
            "loose": Array [
              "rock",
              "scissors",
            ],
            "reference": "lizard",
            "wins": Array [
              "paper",
              "spock",
            ],
          },
        ],
        "modeAllow": Array [
          "pve",
          "eve",
        ],
        "reference": "extended",
      },
    ]
  }
  disableVirtualization={false}
  extraData={
    Object {
      "difficulty": "dedededed",
      "mode": "dededede",
      "type": "dedededede",
      "updatePreset": "dededee",
    }
  }
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  numColumns={1}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View>
        <View
          accessibilityComponentType="button"
          accessibilityLabel={undefined}
          accessibilityTraits={
            Array [
              "button",
            ]
          }
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {},
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={undefined}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "padding": 8,
                    "textAlign": "center",
                  },
                  Object {
                    "color": "#00BFA5",
                  },
                ]
              }
            >
              classic
            </Text>
          </View>
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View>
        <View
          accessibilityComponentType="button"
          accessibilityLabel={undefined}
          accessibilityTraits={
            Array [
              "button",
            ]
          }
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {},
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={undefined}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "padding": 8,
                    "textAlign": "center",
                  },
                  Object {
                    "color": "#00BFA5",
                  },
                ]
              }
            >
              big bang theory
            </Text>
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`renders correctly: without props 1`] = `
<RCTScrollView
  data={
    Array [
      Object {
        "cards": Array [
          Object {
            "images": 1,
            "key": "rock",
            "loose": Array [
              "paper",
            ],
            "reference": "rock",
            "wins": Array [
              "scissors",
            ],
          },
          Object {
            "images": 1,
            "key": "paper",
            "loose": Array [
              "scissors",
            ],
            "reference": "paper",
            "wins": Array [
              "rock",
            ],
          },
          Object {
            "images": 1,
            "key": "scissors",
            "loose": Array [
              "rock",
            ],
            "reference": "scissors",
            "wins": Array [
              "paper",
            ],
          },
        ],
        "modeAllow": Array [
          "pve",
          "eve",
        ],
        "reference": "classic",
      },
      Object {
        "cards": Array [
          Object {
            "images": 1,
            "key": "rock",
            "loose": Array [
              "paper",
              "spock",
            ],
            "reference": "rock",
            "wins": Array [
              "scissors",
              "lizard",
            ],
          },
          Object {
            "images": 1,
            "key": "paper",
            "loose": Array [
              "scissors",
              "lizard",
            ],
            "reference": "paper",
            "wins": Array [
              "rock",
              "spock",
            ],
          },
          Object {
            "images": 1,
            "key": "scissors",
            "loose": Array [
              "rock",
              "spock",
            ],
            "reference": "scissors",
            "wins": Array [
              "paper",
              "lizard",
            ],
          },
          Object {
            "images": 1,
            "key": "spock",
            "loose": Array [
              "lizard",
              "paper",
            ],
            "reference": "spock",
            "wins": Array [
              "rock",
              "scissors",
            ],
          },
          Object {
            "images": 1,
            "key": "lizard",
            "loose": Array [
              "rock",
              "scissors",
            ],
            "reference": "lizard",
            "wins": Array [
              "paper",
              "spock",
            ],
          },
        ],
        "modeAllow": Array [
          "pve",
          "eve",
        ],
        "reference": "extended",
      },
    ]
  }
  disableVirtualization={false}
  extraData={Object {}}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  numColumns={1}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View>
        <View
          accessibilityComponentType="button"
          accessibilityLabel={undefined}
          accessibilityTraits={
            Array [
              "button",
            ]
          }
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {},
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={undefined}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "padding": 8,
                    "textAlign": "center",
                  },
                  Object {
                    "color": "#00BFA5",
                  },
                ]
              }
            >
              classic
            </Text>
          </View>
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View>
        <View
          accessibilityComponentType="button"
          accessibilityLabel={undefined}
          accessibilityTraits={
            Array [
              "button",
            ]
          }
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {},
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={undefined}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "#007AFF",
                    "fontSize": 18,
                    "padding": 8,
                    "textAlign": "center",
                  },
                  Object {
                    "color": "#00BFA5",
                  },
                ]
              }
            >
              big bang theory
            </Text>
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
