// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly: with 1`] = `
<View>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Object {
        "backgroundColor": "#455A64",
        "borderBottomWidth": 1,
        "borderTopWidth": 1,
        "color": "white",
        "fontSize": 15,
        "paddingBottom": 10,
        "paddingTop": 10,
        "textAlign": "center",
      }
    }
  >
    DIFFICULTY LEVEL
  </Text>
  <RCTScrollView
    data={
      Array [
        Object {
          "images": null,
          "key": "easy",
          "reference": "easy",
        },
        Object {
          "images": null,
          "key": "medium",
          "reference": "medium",
        },
        Object {
          "images": null,
          "key": "hard",
          "reference": "hard",
        },
      ]
    }
    disableVirtualization={false}
    extraData={
      Object {
        "difficulty": "dedededed",
        "mode": "dededede",
        "type": "dedededede",
        "updatePreset": "dededee",
      }
    }
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "width": 750,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            accessibilityComponentType="button"
            accessibilityLabel={undefined}
            accessibilityTraits={
              Array [
                "button",
              ]
            }
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View
              style={
                Array [
                  Object {},
                ]
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                disabled={undefined}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "#007AFF",
                      "fontSize": 18,
                      "padding": 8,
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#15133c",
                    },
                  ]
                }
              >
                easy
              </Text>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            accessibilityComponentType="button"
            accessibilityLabel={undefined}
            accessibilityTraits={
              Array [
                "button",
              ]
            }
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View
              style={
                Array [
                  Object {},
                ]
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                disabled={undefined}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "#007AFF",
                      "fontSize": 18,
                      "padding": 8,
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#15133c",
                    },
                  ]
                }
              >
                medium
              </Text>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View>
          <View
            accessibilityComponentType="button"
            accessibilityLabel={undefined}
            accessibilityTraits={
              Array [
                "button",
              ]
            }
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View
              style={
                Array [
                  Object {},
                ]
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                disabled={undefined}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "#007AFF",
                      "fontSize": 18,
                      "padding": 8,
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#15133c",
                    },
                  ]
                }
              >
                hard
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`renders correctly: without props 1`] = `<View />`;
